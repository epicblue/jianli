#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JianLi3Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="JianLi")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategories(Categories instance);
    partial void UpdateCategories(Categories instance);
    partial void DeleteCategories(Categories instance);
    partial void InsertWriters(Writers instance);
    partial void UpdateWriters(Writers instance);
    partial void DeleteWriters(Writers instance);
    partial void InsertBookKeywords(BookKeywords instance);
    partial void UpdateBookKeywords(BookKeywords instance);
    partial void DeleteBookKeywords(BookKeywords instance);
    partial void InsertBookWriters(BookWriters instance);
    partial void UpdateBookWriters(BookWriters instance);
    partial void DeleteBookWriters(BookWriters instance);
    partial void InsertUserBooks(UserBooks instance);
    partial void UpdateUserBooks(UserBooks instance);
    partial void DeleteUserBooks(UserBooks instance);
    partial void InsertKeywords(Keywords instance);
    partial void UpdateKeywords(Keywords instance);
    partial void DeleteKeywords(Keywords instance);
    partial void InsertUserKeyword(UserKeyword instance);
    partial void UpdateUserKeyword(UserKeyword instance);
    partial void DeleteUserKeyword(UserKeyword instance);
    partial void InsertTool(Tool instance);
    partial void UpdateTool(Tool instance);
    partial void DeleteTool(Tool instance);
    partial void InsertToolVersion(ToolVersion instance);
    partial void UpdateToolVersion(ToolVersion instance);
    partial void DeleteToolVersion(ToolVersion instance);
    partial void InsertToolFile(ToolFile instance);
    partial void UpdateToolFile(ToolFile instance);
    partial void DeleteToolFile(ToolFile instance);
    partial void InsertToolPlugin(ToolPlugin instance);
    partial void UpdateToolPlugin(ToolPlugin instance);
    partial void DeleteToolPlugin(ToolPlugin instance);
    partial void InsertToolDepend(ToolDepend instance);
    partial void UpdateToolDepend(ToolDepend instance);
    partial void DeleteToolDepend(ToolDepend instance);
    partial void InsertToolCategory(ToolCategory instance);
    partial void UpdateToolCategory(ToolCategory instance);
    partial void DeleteToolCategory(ToolCategory instance);
    partial void InsertSolutionKeyword(SolutionKeyword instance);
    partial void UpdateSolutionKeyword(SolutionKeyword instance);
    partial void DeleteSolutionKeyword(SolutionKeyword instance);
    partial void InsertSolusionToKeyword(SolusionToKeyword instance);
    partial void UpdateSolusionToKeyword(SolusionToKeyword instance);
    partial void DeleteSolusionToKeyword(SolusionToKeyword instance);
    partial void InsertProjectUser(ProjectUser instance);
    partial void UpdateProjectUser(ProjectUser instance);
    partial void DeleteProjectUser(ProjectUser instance);
    partial void InsertUser2(User2 instance);
    partial void UpdateUser2(User2 instance);
    partial void DeleteUser2(User2 instance);
    partial void InsertProjectModule(ProjectModule instance);
    partial void UpdateProjectModule(ProjectModule instance);
    partial void DeleteProjectModule(ProjectModule instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertProjectIteration(ProjectIteration instance);
    partial void UpdateProjectIteration(ProjectIteration instance);
    partial void DeleteProjectIteration(ProjectIteration instance);
    partial void InsertSolution(Solution instance);
    partial void UpdateSolution(Solution instance);
    partial void DeleteSolution(Solution instance);
    partial void InsertBook(Book instance);
    partial void UpdateBook(Book instance);
    partial void DeleteBook(Book instance);
    partial void InsertBookComment(BookComment instance);
    partial void UpdateBookComment(BookComment instance);
    partial void DeleteBookComment(BookComment instance);
    partial void InsertFile(File instance);
    partial void UpdateFile(File instance);
    partial void DeleteFile(File instance);
    partial void InsertReportException(ReportException instance);
    partial void UpdateReportException(ReportException instance);
    partial void DeleteReportException(ReportException instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::JianLi3Data.Properties.Settings.Default.JianLiConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Categories> Categories
		{
			get
			{
				return this.GetTable<Categories>();
			}
		}
		
		public System.Data.Linq.Table<Writers> Writers
		{
			get
			{
				return this.GetTable<Writers>();
			}
		}
		
		public System.Data.Linq.Table<BookKeywords> BookKeywords
		{
			get
			{
				return this.GetTable<BookKeywords>();
			}
		}
		
		public System.Data.Linq.Table<BookWriters> BookWriters
		{
			get
			{
				return this.GetTable<BookWriters>();
			}
		}
		
		public System.Data.Linq.Table<UserBooks> UserBooks
		{
			get
			{
				return this.GetTable<UserBooks>();
			}
		}
		
		public System.Data.Linq.Table<Keywords> Keywords
		{
			get
			{
				return this.GetTable<Keywords>();
			}
		}
		
		public System.Data.Linq.Table<Help> Helps
		{
			get
			{
				return this.GetTable<Help>();
			}
		}
		
		public System.Data.Linq.Table<UserKeyword> UserKeywords
		{
			get
			{
				return this.GetTable<UserKeyword>();
			}
		}
		
		public System.Data.Linq.Table<Tool> Tools
		{
			get
			{
				return this.GetTable<Tool>();
			}
		}
		
		public System.Data.Linq.Table<ToolVersion> ToolVersions
		{
			get
			{
				return this.GetTable<ToolVersion>();
			}
		}
		
		public System.Data.Linq.Table<ToolFile> ToolFiles
		{
			get
			{
				return this.GetTable<ToolFile>();
			}
		}
		
		public System.Data.Linq.Table<ToolPlugin> ToolPlugins
		{
			get
			{
				return this.GetTable<ToolPlugin>();
			}
		}
		
		public System.Data.Linq.Table<ToolDepend> ToolDepends
		{
			get
			{
				return this.GetTable<ToolDepend>();
			}
		}
		
		public System.Data.Linq.Table<ToolCategory> ToolCategories
		{
			get
			{
				return this.GetTable<ToolCategory>();
			}
		}
		
		public System.Data.Linq.Table<SolutionKeyword> SolutionKeywords
		{
			get
			{
				return this.GetTable<SolutionKeyword>();
			}
		}
		
		public System.Data.Linq.Table<SolusionToKeyword> SolusionToKeywords
		{
			get
			{
				return this.GetTable<SolusionToKeyword>();
			}
		}
		
		public System.Data.Linq.Table<ProjectUser> ProjectUsers
		{
			get
			{
				return this.GetTable<ProjectUser>();
			}
		}
		
		public System.Data.Linq.Table<User2> User2s
		{
			get
			{
				return this.GetTable<User2>();
			}
		}
		
		public System.Data.Linq.Table<ProjectModule> ProjectModules
		{
			get
			{
				return this.GetTable<ProjectModule>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<ProjectIteration> ProjectIterations
		{
			get
			{
				return this.GetTable<ProjectIteration>();
			}
		}
		
		public System.Data.Linq.Table<Solution> Solutions
		{
			get
			{
				return this.GetTable<Solution>();
			}
		}
		
		public System.Data.Linq.Table<Book> Books
		{
			get
			{
				return this.GetTable<Book>();
			}
		}
		
		public System.Data.Linq.Table<BookComment> BookComments
		{
			get
			{
				return this.GetTable<BookComment>();
			}
		}
		
		public System.Data.Linq.Table<File> Files
		{
			get
			{
				return this.GetTable<File>();
			}
		}
		
		public System.Data.Linq.Table<ReportException> ReportExceptions
		{
			get
			{
				return this.GetTable<ReportException>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class Categories : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private string _CategoryName;
		
		private string _CategoryDesc;
		
		private int _CategoryParent;
		
		private EntitySet<Keywords> _Keywords;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnCategoryDescChanging(string value);
    partial void OnCategoryDescChanged();
    partial void OnCategoryParentChanging(int value);
    partial void OnCategoryParentChanged();
    #endregion
		
		public Categories()
		{
			this._Keywords = new EntitySet<Keywords>(new Action<Keywords>(this.attach_Keywords), new Action<Keywords>(this.detach_Keywords));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryDesc", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string CategoryDesc
		{
			get
			{
				return this._CategoryDesc;
			}
			set
			{
				if ((this._CategoryDesc != value))
				{
					this.OnCategoryDescChanging(value);
					this.SendPropertyChanging();
					this._CategoryDesc = value;
					this.SendPropertyChanged("CategoryDesc");
					this.OnCategoryDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryParent", DbType="Int NOT NULL")]
		public int CategoryParent
		{
			get
			{
				return this._CategoryParent;
			}
			set
			{
				if ((this._CategoryParent != value))
				{
					this.OnCategoryParentChanging(value);
					this.SendPropertyChanging();
					this._CategoryParent = value;
					this.SendPropertyChanged("CategoryParent");
					this.OnCategoryParentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categories_Keywords", Storage="_Keywords", ThisKey="CategoryID", OtherKey="CategoryId")]
		public EntitySet<Keywords> Keywords
		{
			get
			{
				return this._Keywords;
			}
			set
			{
				this._Keywords.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Keywords(Keywords entity)
		{
			this.SendPropertyChanging();
			entity.Categories = this;
		}
		
		private void detach_Keywords(Keywords entity)
		{
			this.SendPropertyChanging();
			entity.Categories = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Writers")]
	public partial class Writers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WriterID;
		
		private string _WriterFullName;
		
		private string _WriterDesc;
		
		private EntitySet<BookWriters> _BookWriters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWriterIDChanging(int value);
    partial void OnWriterIDChanged();
    partial void OnWriterFullNameChanging(string value);
    partial void OnWriterFullNameChanged();
    partial void OnWriterDescChanging(string value);
    partial void OnWriterDescChanged();
    #endregion
		
		public Writers()
		{
			this._BookWriters = new EntitySet<BookWriters>(new Action<BookWriters>(this.attach_BookWriters), new Action<BookWriters>(this.detach_BookWriters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WriterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WriterID
		{
			get
			{
				return this._WriterID;
			}
			set
			{
				if ((this._WriterID != value))
				{
					this.OnWriterIDChanging(value);
					this.SendPropertyChanging();
					this._WriterID = value;
					this.SendPropertyChanged("WriterID");
					this.OnWriterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WriterFullName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string WriterFullName
		{
			get
			{
				return this._WriterFullName;
			}
			set
			{
				if ((this._WriterFullName != value))
				{
					this.OnWriterFullNameChanging(value);
					this.SendPropertyChanging();
					this._WriterFullName = value;
					this.SendPropertyChanged("WriterFullName");
					this.OnWriterFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WriterDesc", DbType="NVarChar(MAX)")]
		public string WriterDesc
		{
			get
			{
				return this._WriterDesc;
			}
			set
			{
				if ((this._WriterDesc != value))
				{
					this.OnWriterDescChanging(value);
					this.SendPropertyChanging();
					this._WriterDesc = value;
					this.SendPropertyChanged("WriterDesc");
					this.OnWriterDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Writers_BookWriters", Storage="_BookWriters", ThisKey="WriterID", OtherKey="WriterId")]
		public EntitySet<BookWriters> BookWriters
		{
			get
			{
				return this._BookWriters;
			}
			set
			{
				this._BookWriters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookWriters(BookWriters entity)
		{
			this.SendPropertyChanging();
			entity.Writers = this;
		}
		
		private void detach_BookWriters(BookWriters entity)
		{
			this.SendPropertyChanging();
			entity.Writers = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookKeywords")]
	public partial class BookKeywords : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookId;
		
		private int _KeywordId;
		
		private EntityRef<Keywords> _Keywords;
		
		private EntityRef<Book> _Book;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookIdChanging(int value);
    partial void OnBookIdChanged();
    partial void OnKeywordIdChanging(int value);
    partial void OnKeywordIdChanged();
    #endregion
		
		public BookKeywords()
		{
			this._Keywords = default(EntityRef<Keywords>);
			this._Book = default(EntityRef<Book>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BookId
		{
			get
			{
				return this._BookId;
			}
			set
			{
				if ((this._BookId != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookIdChanging(value);
					this.SendPropertyChanging();
					this._BookId = value;
					this.SendPropertyChanged("BookId");
					this.OnBookIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeywordId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int KeywordId
		{
			get
			{
				return this._KeywordId;
			}
			set
			{
				if ((this._KeywordId != value))
				{
					if (this._Keywords.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKeywordIdChanging(value);
					this.SendPropertyChanging();
					this._KeywordId = value;
					this.SendPropertyChanged("KeywordId");
					this.OnKeywordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Keywords_BookKeywords", Storage="_Keywords", ThisKey="KeywordId", OtherKey="KeywordID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Keywords Keywords
		{
			get
			{
				return this._Keywords.Entity;
			}
			set
			{
				Keywords previousValue = this._Keywords.Entity;
				if (((previousValue != value) 
							|| (this._Keywords.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Keywords.Entity = null;
						previousValue.BookKeywords.Remove(this);
					}
					this._Keywords.Entity = value;
					if ((value != null))
					{
						value.BookKeywords.Add(this);
						this._KeywordId = value.KeywordID;
					}
					else
					{
						this._KeywordId = default(int);
					}
					this.SendPropertyChanged("Keywords");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_BookKeywords", Storage="_Book", ThisKey="BookId", OtherKey="BookID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.BookKeywords.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.BookKeywords.Add(this);
						this._BookId = value.BookID;
					}
					else
					{
						this._BookId = default(int);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookWriters")]
	public partial class BookWriters : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookId;
		
		private int _WriterId;
		
		private EntityRef<Writers> _Writers;
		
		private EntityRef<Book> _Book;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookIdChanging(int value);
    partial void OnBookIdChanged();
    partial void OnWriterIdChanging(int value);
    partial void OnWriterIdChanged();
    #endregion
		
		public BookWriters()
		{
			this._Writers = default(EntityRef<Writers>);
			this._Book = default(EntityRef<Book>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BookId
		{
			get
			{
				return this._BookId;
			}
			set
			{
				if ((this._BookId != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookIdChanging(value);
					this.SendPropertyChanging();
					this._BookId = value;
					this.SendPropertyChanged("BookId");
					this.OnBookIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WriterId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int WriterId
		{
			get
			{
				return this._WriterId;
			}
			set
			{
				if ((this._WriterId != value))
				{
					if (this._Writers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWriterIdChanging(value);
					this.SendPropertyChanging();
					this._WriterId = value;
					this.SendPropertyChanged("WriterId");
					this.OnWriterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Writers_BookWriters", Storage="_Writers", ThisKey="WriterId", OtherKey="WriterID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Writers Writers
		{
			get
			{
				return this._Writers.Entity;
			}
			set
			{
				Writers previousValue = this._Writers.Entity;
				if (((previousValue != value) 
							|| (this._Writers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Writers.Entity = null;
						previousValue.BookWriters.Remove(this);
					}
					this._Writers.Entity = value;
					if ((value != null))
					{
						value.BookWriters.Add(this);
						this._WriterId = value.WriterID;
					}
					else
					{
						this._WriterId = default(int);
					}
					this.SendPropertyChanged("Writers");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_BookWriters", Storage="_Book", ThisKey="BookId", OtherKey="BookID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.BookWriters.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.BookWriters.Add(this);
						this._BookId = value.BookID;
					}
					else
					{
						this._BookId = default(int);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserBooks")]
	public partial class UserBooks : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private int _BookID;
		
		private int _BookRate;
		
		private int _BookReadCounts;
		
		private int _BookReadTime;
		
		private int _BookReadTick;
		
		private EntityRef<Book> _Book;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnBookIDChanging(int value);
    partial void OnBookIDChanged();
    partial void OnBookRateChanging(int value);
    partial void OnBookRateChanged();
    partial void OnBookReadCountsChanging(int value);
    partial void OnBookReadCountsChanged();
    partial void OnBookReadTimeChanging(int value);
    partial void OnBookReadTimeChanged();
    partial void OnBookReadTickChanging(int value);
    partial void OnBookReadTickChanged();
    #endregion
		
		public UserBooks()
		{
			this._Book = default(EntityRef<Book>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookRate", DbType="Int NOT NULL")]
		public int BookRate
		{
			get
			{
				return this._BookRate;
			}
			set
			{
				if ((this._BookRate != value))
				{
					this.OnBookRateChanging(value);
					this.SendPropertyChanging();
					this._BookRate = value;
					this.SendPropertyChanged("BookRate");
					this.OnBookRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookReadCounts", DbType="Int NOT NULL")]
		public int BookReadCounts
		{
			get
			{
				return this._BookReadCounts;
			}
			set
			{
				if ((this._BookReadCounts != value))
				{
					this.OnBookReadCountsChanging(value);
					this.SendPropertyChanging();
					this._BookReadCounts = value;
					this.SendPropertyChanged("BookReadCounts");
					this.OnBookReadCountsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookReadTime", DbType="Int NOT NULL")]
		public int BookReadTime
		{
			get
			{
				return this._BookReadTime;
			}
			set
			{
				if ((this._BookReadTime != value))
				{
					this.OnBookReadTimeChanging(value);
					this.SendPropertyChanging();
					this._BookReadTime = value;
					this.SendPropertyChanged("BookReadTime");
					this.OnBookReadTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookReadTick", DbType="Int NOT NULL")]
		public int BookReadTick
		{
			get
			{
				return this._BookReadTick;
			}
			set
			{
				if ((this._BookReadTick != value))
				{
					this.OnBookReadTickChanging(value);
					this.SendPropertyChanging();
					this._BookReadTick = value;
					this.SendPropertyChanged("BookReadTick");
					this.OnBookReadTickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_UserBooks", Storage="_Book", ThisKey="BookID", OtherKey="BookID", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.UserBooks.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.UserBooks.Add(this);
						this._BookID = value.BookID;
					}
					else
					{
						this._BookID = default(int);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserBooks", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserBooks.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserBooks.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Keywords")]
	public partial class Keywords : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _KeywordID;
		
		private string _KeywordName;
		
		private string _KeywordDesc;
		
		private int _CategoryId;
		
		private int _KeywordRate;
		
		private string _KeywordSubPath;
		
		private EntitySet<BookKeywords> _BookKeywords;
		
		private EntitySet<Book> _Books;
		
		private EntityRef<Categories> _Categories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKeywordIDChanging(int value);
    partial void OnKeywordIDChanged();
    partial void OnKeywordNameChanging(string value);
    partial void OnKeywordNameChanged();
    partial void OnKeywordDescChanging(string value);
    partial void OnKeywordDescChanged();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnKeywordRateChanging(int value);
    partial void OnKeywordRateChanged();
    partial void OnKeywordSubPathChanging(string value);
    partial void OnKeywordSubPathChanged();
    #endregion
		
		public Keywords()
		{
			this._BookKeywords = new EntitySet<BookKeywords>(new Action<BookKeywords>(this.attach_BookKeywords), new Action<BookKeywords>(this.detach_BookKeywords));
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			this._Categories = default(EntityRef<Categories>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeywordID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int KeywordID
		{
			get
			{
				return this._KeywordID;
			}
			set
			{
				if ((this._KeywordID != value))
				{
					this.OnKeywordIDChanging(value);
					this.SendPropertyChanging();
					this._KeywordID = value;
					this.SendPropertyChanged("KeywordID");
					this.OnKeywordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeywordName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string KeywordName
		{
			get
			{
				return this._KeywordName;
			}
			set
			{
				if ((this._KeywordName != value))
				{
					this.OnKeywordNameChanging(value);
					this.SendPropertyChanging();
					this._KeywordName = value;
					this.SendPropertyChanged("KeywordName");
					this.OnKeywordNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeywordDesc", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string KeywordDesc
		{
			get
			{
				return this._KeywordDesc;
			}
			set
			{
				if ((this._KeywordDesc != value))
				{
					this.OnKeywordDescChanging(value);
					this.SendPropertyChanging();
					this._KeywordDesc = value;
					this.SendPropertyChanged("KeywordDesc");
					this.OnKeywordDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int NOT NULL")]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Categories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeywordRate", DbType="Int NOT NULL")]
		public int KeywordRate
		{
			get
			{
				return this._KeywordRate;
			}
			set
			{
				if ((this._KeywordRate != value))
				{
					this.OnKeywordRateChanging(value);
					this.SendPropertyChanging();
					this._KeywordRate = value;
					this.SendPropertyChanged("KeywordRate");
					this.OnKeywordRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeywordSubPath", DbType="NVarChar(MAX)")]
		public string KeywordSubPath
		{
			get
			{
				return this._KeywordSubPath;
			}
			set
			{
				if ((this._KeywordSubPath != value))
				{
					this.OnKeywordSubPathChanging(value);
					this.SendPropertyChanging();
					this._KeywordSubPath = value;
					this.SendPropertyChanged("KeywordSubPath");
					this.OnKeywordSubPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Keywords_BookKeywords", Storage="_BookKeywords", ThisKey="KeywordID", OtherKey="KeywordId")]
		public EntitySet<BookKeywords> BookKeywords
		{
			get
			{
				return this._BookKeywords;
			}
			set
			{
				this._BookKeywords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Keywords_Book", Storage="_Books", ThisKey="KeywordID", OtherKey="BookDefaultKeyword")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categories_Keywords", Storage="_Categories", ThisKey="CategoryId", OtherKey="CategoryID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Categories Categories
		{
			get
			{
				return this._Categories.Entity;
			}
			set
			{
				Categories previousValue = this._Categories.Entity;
				if (((previousValue != value) 
							|| (this._Categories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Categories.Entity = null;
						previousValue.Keywords.Remove(this);
					}
					this._Categories.Entity = value;
					if ((value != null))
					{
						value.Keywords.Add(this);
						this._CategoryId = value.CategoryID;
					}
					else
					{
						this._CategoryId = default(int);
					}
					this.SendPropertyChanged("Categories");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookKeywords(BookKeywords entity)
		{
			this.SendPropertyChanging();
			entity.Keywords = this;
		}
		
		private void detach_BookKeywords(BookKeywords entity)
		{
			this.SendPropertyChanging();
			entity.Keywords = null;
		}
		
		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Keywords = this;
		}
		
		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Keywords = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Help")]
	public partial class Help
	{
		
		private int _HelpSubmitUser;
		
		private string _HelpTitle;
		
		private string _HelpContext;
		
		private string _HelpAnswer;
		
		private bool _HelpAnswered;
		
		public Help()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HelpSubmitUser", DbType="Int NOT NULL")]
		public int HelpSubmitUser
		{
			get
			{
				return this._HelpSubmitUser;
			}
			set
			{
				if ((this._HelpSubmitUser != value))
				{
					this._HelpSubmitUser = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HelpTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string HelpTitle
		{
			get
			{
				return this._HelpTitle;
			}
			set
			{
				if ((this._HelpTitle != value))
				{
					this._HelpTitle = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HelpContext", DbType="NVarChar(MAX)")]
		public string HelpContext
		{
			get
			{
				return this._HelpContext;
			}
			set
			{
				if ((this._HelpContext != value))
				{
					this._HelpContext = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HelpAnswer", DbType="NVarChar(MAX)")]
		public string HelpAnswer
		{
			get
			{
				return this._HelpAnswer;
			}
			set
			{
				if ((this._HelpAnswer != value))
				{
					this._HelpAnswer = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HelpAnswered", DbType="Bit NOT NULL")]
		public bool HelpAnswered
		{
			get
			{
				return this._HelpAnswered;
			}
			set
			{
				if ((this._HelpAnswered != value))
				{
					this._HelpAnswered = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserKeywords")]
	public partial class UserKeyword : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private int _KeywordID;
		
		private int _KeywordRate;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnKeywordIDChanging(int value);
    partial void OnKeywordIDChanged();
    partial void OnKeywordRateChanging(int value);
    partial void OnKeywordRateChanged();
    #endregion
		
		public UserKeyword()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeywordID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int KeywordID
		{
			get
			{
				return this._KeywordID;
			}
			set
			{
				if ((this._KeywordID != value))
				{
					this.OnKeywordIDChanging(value);
					this.SendPropertyChanging();
					this._KeywordID = value;
					this.SendPropertyChanged("KeywordID");
					this.OnKeywordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeywordRate", DbType="Int NOT NULL")]
		public int KeywordRate
		{
			get
			{
				return this._KeywordRate;
			}
			set
			{
				if ((this._KeywordRate != value))
				{
					this.OnKeywordRateChanging(value);
					this.SendPropertyChanging();
					this._KeywordRate = value;
					this.SendPropertyChanged("KeywordRate");
					this.OnKeywordRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserKeyword", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserKeywords.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserKeywords.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tools")]
	public partial class Tool : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ToolID;
		
		private string _ToolName;
		
		private string _ToolSubPath;
		
		private int _ToolRate;
		
		private string _ToolDesc;
		
		private string _ToolCompany;
		
		private System.Guid _CategoryID;
		
		private EntitySet<ToolVersion> _ToolVersions;
		
		private EntityRef<ToolCategory> _ToolCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnToolIDChanging(System.Guid value);
    partial void OnToolIDChanged();
    partial void OnToolNameChanging(string value);
    partial void OnToolNameChanged();
    partial void OnToolSubPathChanging(string value);
    partial void OnToolSubPathChanged();
    partial void OnToolRateChanging(int value);
    partial void OnToolRateChanged();
    partial void OnToolDescChanging(string value);
    partial void OnToolDescChanged();
    partial void OnToolCompanyChanging(string value);
    partial void OnToolCompanyChanged();
    partial void OnCategoryIDChanging(System.Guid value);
    partial void OnCategoryIDChanged();
    #endregion
		
		public Tool()
		{
			this._ToolVersions = new EntitySet<ToolVersion>(new Action<ToolVersion>(this.attach_ToolVersions), new Action<ToolVersion>(this.detach_ToolVersions));
			this._ToolCategory = default(EntityRef<ToolCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToolID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ToolID
		{
			get
			{
				return this._ToolID;
			}
			set
			{
				if ((this._ToolID != value))
				{
					this.OnToolIDChanging(value);
					this.SendPropertyChanging();
					this._ToolID = value;
					this.SendPropertyChanged("ToolID");
					this.OnToolIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToolName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ToolName
		{
			get
			{
				return this._ToolName;
			}
			set
			{
				if ((this._ToolName != value))
				{
					this.OnToolNameChanging(value);
					this.SendPropertyChanging();
					this._ToolName = value;
					this.SendPropertyChanged("ToolName");
					this.OnToolNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToolSubPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ToolSubPath
		{
			get
			{
				return this._ToolSubPath;
			}
			set
			{
				if ((this._ToolSubPath != value))
				{
					this.OnToolSubPathChanging(value);
					this.SendPropertyChanging();
					this._ToolSubPath = value;
					this.SendPropertyChanged("ToolSubPath");
					this.OnToolSubPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToolRate", DbType="Int NOT NULL")]
		public int ToolRate
		{
			get
			{
				return this._ToolRate;
			}
			set
			{
				if ((this._ToolRate != value))
				{
					this.OnToolRateChanging(value);
					this.SendPropertyChanging();
					this._ToolRate = value;
					this.SendPropertyChanged("ToolRate");
					this.OnToolRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToolDesc", DbType="NVarChar(MAX)")]
		public string ToolDesc
		{
			get
			{
				return this._ToolDesc;
			}
			set
			{
				if ((this._ToolDesc != value))
				{
					this.OnToolDescChanging(value);
					this.SendPropertyChanging();
					this._ToolDesc = value;
					this.SendPropertyChanged("ToolDesc");
					this.OnToolDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToolCompany", DbType="NVarChar(MAX)")]
		public string ToolCompany
		{
			get
			{
				return this._ToolCompany;
			}
			set
			{
				if ((this._ToolCompany != value))
				{
					this.OnToolCompanyChanging(value);
					this.SendPropertyChanging();
					this._ToolCompany = value;
					this.SendPropertyChanged("ToolCompany");
					this.OnToolCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._ToolCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tool_ToolVersion", Storage="_ToolVersions", ThisKey="ToolID", OtherKey="ToolID")]
		public EntitySet<ToolVersion> ToolVersions
		{
			get
			{
				return this._ToolVersions;
			}
			set
			{
				this._ToolVersions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToolCategory_Tool", Storage="_ToolCategory", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public ToolCategory ToolCategory
		{
			get
			{
				return this._ToolCategory.Entity;
			}
			set
			{
				ToolCategory previousValue = this._ToolCategory.Entity;
				if (((previousValue != value) 
							|| (this._ToolCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToolCategory.Entity = null;
						previousValue.Tools.Remove(this);
					}
					this._ToolCategory.Entity = value;
					if ((value != null))
					{
						value.Tools.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(System.Guid);
					}
					this.SendPropertyChanged("ToolCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ToolVersions(ToolVersion entity)
		{
			this.SendPropertyChanging();
			entity.Tool = this;
		}
		
		private void detach_ToolVersions(ToolVersion entity)
		{
			this.SendPropertyChanging();
			entity.Tool = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ToolVersions")]
	public partial class ToolVersion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _VersionID;
		
		private System.Guid _ToolID;
		
		private string _SubPath;
		
		private string _VersionName;
		
		private EntitySet<ToolFile> _ToolFiles;
		
		private EntitySet<ToolPlugin> _ToolPlugins;
		
		private EntitySet<ToolPlugin> _ToolPlugins1;
		
		private EntitySet<ToolDepend> _ToolDepends;
		
		private EntitySet<ToolDepend> _ToolDepends1;
		
		private EntityRef<Tool> _Tool;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVersionIDChanging(System.Guid value);
    partial void OnVersionIDChanged();
    partial void OnToolIDChanging(System.Guid value);
    partial void OnToolIDChanged();
    partial void OnSubPathChanging(string value);
    partial void OnSubPathChanged();
    partial void OnVersionNameChanging(string value);
    partial void OnVersionNameChanged();
    #endregion
		
		public ToolVersion()
		{
			this._ToolFiles = new EntitySet<ToolFile>(new Action<ToolFile>(this.attach_ToolFiles), new Action<ToolFile>(this.detach_ToolFiles));
			this._ToolPlugins = new EntitySet<ToolPlugin>(new Action<ToolPlugin>(this.attach_ToolPlugins), new Action<ToolPlugin>(this.detach_ToolPlugins));
			this._ToolPlugins1 = new EntitySet<ToolPlugin>(new Action<ToolPlugin>(this.attach_ToolPlugins1), new Action<ToolPlugin>(this.detach_ToolPlugins1));
			this._ToolDepends = new EntitySet<ToolDepend>(new Action<ToolDepend>(this.attach_ToolDepends), new Action<ToolDepend>(this.detach_ToolDepends));
			this._ToolDepends1 = new EntitySet<ToolDepend>(new Action<ToolDepend>(this.attach_ToolDepends1), new Action<ToolDepend>(this.detach_ToolDepends1));
			this._Tool = default(EntityRef<Tool>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid VersionID
		{
			get
			{
				return this._VersionID;
			}
			set
			{
				if ((this._VersionID != value))
				{
					this.OnVersionIDChanging(value);
					this.SendPropertyChanging();
					this._VersionID = value;
					this.SendPropertyChanged("VersionID");
					this.OnVersionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToolID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ToolID
		{
			get
			{
				return this._ToolID;
			}
			set
			{
				if ((this._ToolID != value))
				{
					if (this._Tool.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToolIDChanging(value);
					this.SendPropertyChanging();
					this._ToolID = value;
					this.SendPropertyChanged("ToolID");
					this.OnToolIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SubPath
		{
			get
			{
				return this._SubPath;
			}
			set
			{
				if ((this._SubPath != value))
				{
					this.OnSubPathChanging(value);
					this.SendPropertyChanging();
					this._SubPath = value;
					this.SendPropertyChanged("SubPath");
					this.OnSubPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string VersionName
		{
			get
			{
				return this._VersionName;
			}
			set
			{
				if ((this._VersionName != value))
				{
					this.OnVersionNameChanging(value);
					this.SendPropertyChanging();
					this._VersionName = value;
					this.SendPropertyChanged("VersionName");
					this.OnVersionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToolVersion_ToolFile", Storage="_ToolFiles", ThisKey="VersionID", OtherKey="ToolVersionID")]
		public EntitySet<ToolFile> ToolFiles
		{
			get
			{
				return this._ToolFiles;
			}
			set
			{
				this._ToolFiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToolVersion_ToolPlugin", Storage="_ToolPlugins", ThisKey="VersionID", OtherKey="ToolVersionID")]
		public EntitySet<ToolPlugin> ToolPlugins
		{
			get
			{
				return this._ToolPlugins;
			}
			set
			{
				this._ToolPlugins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToolVersion_ToolPlugin1", Storage="_ToolPlugins1", ThisKey="VersionID", OtherKey="PluginToolVersionID")]
		public EntitySet<ToolPlugin> ToolPlugins1
		{
			get
			{
				return this._ToolPlugins1;
			}
			set
			{
				this._ToolPlugins1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToolVersion_ToolDepend", Storage="_ToolDepends", ThisKey="VersionID", OtherKey="ToolVersionID")]
		public EntitySet<ToolDepend> ToolDepends
		{
			get
			{
				return this._ToolDepends;
			}
			set
			{
				this._ToolDepends.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToolVersion_ToolDepend1", Storage="_ToolDepends1", ThisKey="VersionID", OtherKey="DependToolVersionID")]
		public EntitySet<ToolDepend> ToolDepends1
		{
			get
			{
				return this._ToolDepends1;
			}
			set
			{
				this._ToolDepends1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tool_ToolVersion", Storage="_Tool", ThisKey="ToolID", OtherKey="ToolID", IsForeignKey=true)]
		public Tool Tool
		{
			get
			{
				return this._Tool.Entity;
			}
			set
			{
				Tool previousValue = this._Tool.Entity;
				if (((previousValue != value) 
							|| (this._Tool.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tool.Entity = null;
						previousValue.ToolVersions.Remove(this);
					}
					this._Tool.Entity = value;
					if ((value != null))
					{
						value.ToolVersions.Add(this);
						this._ToolID = value.ToolID;
					}
					else
					{
						this._ToolID = default(System.Guid);
					}
					this.SendPropertyChanged("Tool");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ToolFiles(ToolFile entity)
		{
			this.SendPropertyChanging();
			entity.ToolVersion = this;
		}
		
		private void detach_ToolFiles(ToolFile entity)
		{
			this.SendPropertyChanging();
			entity.ToolVersion = null;
		}
		
		private void attach_ToolPlugins(ToolPlugin entity)
		{
			this.SendPropertyChanging();
			entity.ToolVersion = this;
		}
		
		private void detach_ToolPlugins(ToolPlugin entity)
		{
			this.SendPropertyChanging();
			entity.ToolVersion = null;
		}
		
		private void attach_ToolPlugins1(ToolPlugin entity)
		{
			this.SendPropertyChanging();
			entity.ToolVersion1 = this;
		}
		
		private void detach_ToolPlugins1(ToolPlugin entity)
		{
			this.SendPropertyChanging();
			entity.ToolVersion1 = null;
		}
		
		private void attach_ToolDepends(ToolDepend entity)
		{
			this.SendPropertyChanging();
			entity.ToolVersion = this;
		}
		
		private void detach_ToolDepends(ToolDepend entity)
		{
			this.SendPropertyChanging();
			entity.ToolVersion = null;
		}
		
		private void attach_ToolDepends1(ToolDepend entity)
		{
			this.SendPropertyChanging();
			entity.ToolVersion1 = this;
		}
		
		private void detach_ToolDepends1(ToolDepend entity)
		{
			this.SendPropertyChanging();
			entity.ToolVersion1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ToolFiles")]
	public partial class ToolFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _FileID;
		
		private System.Guid _ToolVersionID;
		
		private string _FileTitle;
		
		private string _FilePath;
		
		private int _FileRate;
		
		private EntityRef<ToolVersion> _ToolVersion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileIDChanging(System.Guid value);
    partial void OnFileIDChanged();
    partial void OnToolVersionIDChanging(System.Guid value);
    partial void OnToolVersionIDChanged();
    partial void OnFileTitleChanging(string value);
    partial void OnFileTitleChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    partial void OnFileRateChanging(int value);
    partial void OnFileRateChanged();
    #endregion
		
		public ToolFile()
		{
			this._ToolVersion = default(EntityRef<ToolVersion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid FileID
		{
			get
			{
				return this._FileID;
			}
			set
			{
				if ((this._FileID != value))
				{
					this.OnFileIDChanging(value);
					this.SendPropertyChanging();
					this._FileID = value;
					this.SendPropertyChanged("FileID");
					this.OnFileIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToolVersionID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ToolVersionID
		{
			get
			{
				return this._ToolVersionID;
			}
			set
			{
				if ((this._ToolVersionID != value))
				{
					if (this._ToolVersion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToolVersionIDChanging(value);
					this.SendPropertyChanging();
					this._ToolVersionID = value;
					this.SendPropertyChanged("ToolVersionID");
					this.OnToolVersionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FileTitle
		{
			get
			{
				return this._FileTitle;
			}
			set
			{
				if ((this._FileTitle != value))
				{
					this.OnFileTitleChanging(value);
					this.SendPropertyChanging();
					this._FileTitle = value;
					this.SendPropertyChanged("FileTitle");
					this.OnFileTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FilePath
		{
			get
			{
				return this._FilePath;
			}
			set
			{
				if ((this._FilePath != value))
				{
					this.OnFilePathChanging(value);
					this.SendPropertyChanging();
					this._FilePath = value;
					this.SendPropertyChanged("FilePath");
					this.OnFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileRate", DbType="Int NOT NULL")]
		public int FileRate
		{
			get
			{
				return this._FileRate;
			}
			set
			{
				if ((this._FileRate != value))
				{
					this.OnFileRateChanging(value);
					this.SendPropertyChanging();
					this._FileRate = value;
					this.SendPropertyChanged("FileRate");
					this.OnFileRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToolVersion_ToolFile", Storage="_ToolVersion", ThisKey="ToolVersionID", OtherKey="VersionID", IsForeignKey=true)]
		public ToolVersion ToolVersion
		{
			get
			{
				return this._ToolVersion.Entity;
			}
			set
			{
				ToolVersion previousValue = this._ToolVersion.Entity;
				if (((previousValue != value) 
							|| (this._ToolVersion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToolVersion.Entity = null;
						previousValue.ToolFiles.Remove(this);
					}
					this._ToolVersion.Entity = value;
					if ((value != null))
					{
						value.ToolFiles.Add(this);
						this._ToolVersionID = value.VersionID;
					}
					else
					{
						this._ToolVersionID = default(System.Guid);
					}
					this.SendPropertyChanged("ToolVersion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ToolPlugins")]
	public partial class ToolPlugin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ToolVersionID;
		
		private System.Guid _PluginToolVersionID;
		
		private EntityRef<ToolVersion> _ToolVersion;
		
		private EntityRef<ToolVersion> _ToolVersion1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnToolVersionIDChanging(System.Guid value);
    partial void OnToolVersionIDChanged();
    partial void OnPluginToolVersionIDChanging(System.Guid value);
    partial void OnPluginToolVersionIDChanged();
    #endregion
		
		public ToolPlugin()
		{
			this._ToolVersion = default(EntityRef<ToolVersion>);
			this._ToolVersion1 = default(EntityRef<ToolVersion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToolVersionID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ToolVersionID
		{
			get
			{
				return this._ToolVersionID;
			}
			set
			{
				if ((this._ToolVersionID != value))
				{
					if (this._ToolVersion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToolVersionIDChanging(value);
					this.SendPropertyChanging();
					this._ToolVersionID = value;
					this.SendPropertyChanged("ToolVersionID");
					this.OnToolVersionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PluginToolVersionID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PluginToolVersionID
		{
			get
			{
				return this._PluginToolVersionID;
			}
			set
			{
				if ((this._PluginToolVersionID != value))
				{
					if (this._ToolVersion1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPluginToolVersionIDChanging(value);
					this.SendPropertyChanging();
					this._PluginToolVersionID = value;
					this.SendPropertyChanged("PluginToolVersionID");
					this.OnPluginToolVersionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToolVersion_ToolPlugin", Storage="_ToolVersion", ThisKey="ToolVersionID", OtherKey="VersionID", IsForeignKey=true)]
		public ToolVersion ToolVersion
		{
			get
			{
				return this._ToolVersion.Entity;
			}
			set
			{
				ToolVersion previousValue = this._ToolVersion.Entity;
				if (((previousValue != value) 
							|| (this._ToolVersion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToolVersion.Entity = null;
						previousValue.ToolPlugins.Remove(this);
					}
					this._ToolVersion.Entity = value;
					if ((value != null))
					{
						value.ToolPlugins.Add(this);
						this._ToolVersionID = value.VersionID;
					}
					else
					{
						this._ToolVersionID = default(System.Guid);
					}
					this.SendPropertyChanged("ToolVersion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToolVersion_ToolPlugin1", Storage="_ToolVersion1", ThisKey="PluginToolVersionID", OtherKey="VersionID", IsForeignKey=true)]
		public ToolVersion ToolVersion1
		{
			get
			{
				return this._ToolVersion1.Entity;
			}
			set
			{
				ToolVersion previousValue = this._ToolVersion1.Entity;
				if (((previousValue != value) 
							|| (this._ToolVersion1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToolVersion1.Entity = null;
						previousValue.ToolPlugins1.Remove(this);
					}
					this._ToolVersion1.Entity = value;
					if ((value != null))
					{
						value.ToolPlugins1.Add(this);
						this._PluginToolVersionID = value.VersionID;
					}
					else
					{
						this._PluginToolVersionID = default(System.Guid);
					}
					this.SendPropertyChanged("ToolVersion1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ToolDepends")]
	public partial class ToolDepend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ToolVersionID;
		
		private System.Guid _DependToolVersionID;
		
		private EntityRef<ToolVersion> _ToolVersion;
		
		private EntityRef<ToolVersion> _ToolVersion1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnToolVersionIDChanging(System.Guid value);
    partial void OnToolVersionIDChanged();
    partial void OnDependToolVersionIDChanging(System.Guid value);
    partial void OnDependToolVersionIDChanged();
    #endregion
		
		public ToolDepend()
		{
			this._ToolVersion = default(EntityRef<ToolVersion>);
			this._ToolVersion1 = default(EntityRef<ToolVersion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToolVersionID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ToolVersionID
		{
			get
			{
				return this._ToolVersionID;
			}
			set
			{
				if ((this._ToolVersionID != value))
				{
					if (this._ToolVersion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToolVersionIDChanging(value);
					this.SendPropertyChanging();
					this._ToolVersionID = value;
					this.SendPropertyChanged("ToolVersionID");
					this.OnToolVersionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DependToolVersionID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DependToolVersionID
		{
			get
			{
				return this._DependToolVersionID;
			}
			set
			{
				if ((this._DependToolVersionID != value))
				{
					if (this._ToolVersion1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDependToolVersionIDChanging(value);
					this.SendPropertyChanging();
					this._DependToolVersionID = value;
					this.SendPropertyChanged("DependToolVersionID");
					this.OnDependToolVersionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToolVersion_ToolDepend", Storage="_ToolVersion", ThisKey="ToolVersionID", OtherKey="VersionID", IsForeignKey=true)]
		public ToolVersion ToolVersion
		{
			get
			{
				return this._ToolVersion.Entity;
			}
			set
			{
				ToolVersion previousValue = this._ToolVersion.Entity;
				if (((previousValue != value) 
							|| (this._ToolVersion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToolVersion.Entity = null;
						previousValue.ToolDepends.Remove(this);
					}
					this._ToolVersion.Entity = value;
					if ((value != null))
					{
						value.ToolDepends.Add(this);
						this._ToolVersionID = value.VersionID;
					}
					else
					{
						this._ToolVersionID = default(System.Guid);
					}
					this.SendPropertyChanged("ToolVersion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToolVersion_ToolDepend1", Storage="_ToolVersion1", ThisKey="DependToolVersionID", OtherKey="VersionID", IsForeignKey=true)]
		public ToolVersion ToolVersion1
		{
			get
			{
				return this._ToolVersion1.Entity;
			}
			set
			{
				ToolVersion previousValue = this._ToolVersion1.Entity;
				if (((previousValue != value) 
							|| (this._ToolVersion1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToolVersion1.Entity = null;
						previousValue.ToolDepends1.Remove(this);
					}
					this._ToolVersion1.Entity = value;
					if ((value != null))
					{
						value.ToolDepends1.Add(this);
						this._DependToolVersionID = value.VersionID;
					}
					else
					{
						this._DependToolVersionID = default(System.Guid);
					}
					this.SendPropertyChanged("ToolVersion1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ToolCategorys")]
	public partial class ToolCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CategoryID;
		
		private string _CategoryName;
		
		private string _CategoryDesc;
		
		private System.Nullable<System.Guid> _CategoryParent;
		
		private EntitySet<Tool> _Tools;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(System.Guid value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnCategoryDescChanging(string value);
    partial void OnCategoryDescChanged();
    partial void OnCategoryParentChanging(System.Nullable<System.Guid> value);
    partial void OnCategoryParentChanged();
    #endregion
		
		public ToolCategory()
		{
			this._Tools = new EntitySet<Tool>(new Action<Tool>(this.attach_Tools), new Action<Tool>(this.detach_Tools));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryDesc", DbType="NVarChar(MAX)")]
		public string CategoryDesc
		{
			get
			{
				return this._CategoryDesc;
			}
			set
			{
				if ((this._CategoryDesc != value))
				{
					this.OnCategoryDescChanging(value);
					this.SendPropertyChanging();
					this._CategoryDesc = value;
					this.SendPropertyChanged("CategoryDesc");
					this.OnCategoryDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryParent", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CategoryParent
		{
			get
			{
				return this._CategoryParent;
			}
			set
			{
				if ((this._CategoryParent != value))
				{
					this.OnCategoryParentChanging(value);
					this.SendPropertyChanging();
					this._CategoryParent = value;
					this.SendPropertyChanged("CategoryParent");
					this.OnCategoryParentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToolCategory_Tool", Storage="_Tools", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<Tool> Tools
		{
			get
			{
				return this._Tools;
			}
			set
			{
				this._Tools.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tools(Tool entity)
		{
			this.SendPropertyChanging();
			entity.ToolCategory = this;
		}
		
		private void detach_Tools(Tool entity)
		{
			this.SendPropertyChanging();
			entity.ToolCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SolutionKeywords")]
	public partial class SolutionKeyword : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SolusionKeywordID;
		
		private string _SolutionKeywordName;
		
		private string _SolutionKeywordDesc;
		
		private EntitySet<SolusionToKeyword> _SolusionToKeywords;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSolusionKeywordIDChanging(System.Guid value);
    partial void OnSolusionKeywordIDChanged();
    partial void OnSolutionKeywordNameChanging(string value);
    partial void OnSolutionKeywordNameChanged();
    partial void OnSolutionKeywordDescChanging(string value);
    partial void OnSolutionKeywordDescChanged();
    #endregion
		
		public SolutionKeyword()
		{
			this._SolusionToKeywords = new EntitySet<SolusionToKeyword>(new Action<SolusionToKeyword>(this.attach_SolusionToKeywords), new Action<SolusionToKeyword>(this.detach_SolusionToKeywords));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SolusionKeywordID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SolusionKeywordID
		{
			get
			{
				return this._SolusionKeywordID;
			}
			set
			{
				if ((this._SolusionKeywordID != value))
				{
					this.OnSolusionKeywordIDChanging(value);
					this.SendPropertyChanging();
					this._SolusionKeywordID = value;
					this.SendPropertyChanged("SolusionKeywordID");
					this.OnSolusionKeywordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SolutionKeywordName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SolutionKeywordName
		{
			get
			{
				return this._SolutionKeywordName;
			}
			set
			{
				if ((this._SolutionKeywordName != value))
				{
					this.OnSolutionKeywordNameChanging(value);
					this.SendPropertyChanging();
					this._SolutionKeywordName = value;
					this.SendPropertyChanged("SolutionKeywordName");
					this.OnSolutionKeywordNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SolutionKeywordDesc", DbType="NVarChar(MAX)")]
		public string SolutionKeywordDesc
		{
			get
			{
				return this._SolutionKeywordDesc;
			}
			set
			{
				if ((this._SolutionKeywordDesc != value))
				{
					this.OnSolutionKeywordDescChanging(value);
					this.SendPropertyChanging();
					this._SolutionKeywordDesc = value;
					this.SendPropertyChanged("SolutionKeywordDesc");
					this.OnSolutionKeywordDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SolutionKeyword_SolusionToKeyword", Storage="_SolusionToKeywords", ThisKey="SolusionKeywordID", OtherKey="SolutionKeywordID")]
		public EntitySet<SolusionToKeyword> SolusionToKeywords
		{
			get
			{
				return this._SolusionToKeywords;
			}
			set
			{
				this._SolusionToKeywords.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SolusionToKeywords(SolusionToKeyword entity)
		{
			this.SendPropertyChanging();
			entity.SolutionKeyword = this;
		}
		
		private void detach_SolusionToKeywords(SolusionToKeyword entity)
		{
			this.SendPropertyChanging();
			entity.SolutionKeyword = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SolusionToKeywords")]
	public partial class SolusionToKeyword : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SolutionID;
		
		private System.Guid _SolutionKeywordID;
		
		private byte _Rate;
		
		private EntityRef<SolutionKeyword> _SolutionKeyword;
		
		private EntityRef<Solution> _Solution;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSolutionIDChanging(System.Guid value);
    partial void OnSolutionIDChanged();
    partial void OnSolutionKeywordIDChanging(System.Guid value);
    partial void OnSolutionKeywordIDChanged();
    partial void OnRateChanging(byte value);
    partial void OnRateChanged();
    #endregion
		
		public SolusionToKeyword()
		{
			this._SolutionKeyword = default(EntityRef<SolutionKeyword>);
			this._Solution = default(EntityRef<Solution>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SolutionID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SolutionID
		{
			get
			{
				return this._SolutionID;
			}
			set
			{
				if ((this._SolutionID != value))
				{
					if (this._Solution.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSolutionIDChanging(value);
					this.SendPropertyChanging();
					this._SolutionID = value;
					this.SendPropertyChanged("SolutionID");
					this.OnSolutionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SolutionKeywordID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SolutionKeywordID
		{
			get
			{
				return this._SolutionKeywordID;
			}
			set
			{
				if ((this._SolutionKeywordID != value))
				{
					if (this._SolutionKeyword.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSolutionKeywordIDChanging(value);
					this.SendPropertyChanging();
					this._SolutionKeywordID = value;
					this.SendPropertyChanged("SolutionKeywordID");
					this.OnSolutionKeywordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="TinyInt NOT NULL")]
		public byte Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SolutionKeyword_SolusionToKeyword", Storage="_SolutionKeyword", ThisKey="SolutionKeywordID", OtherKey="SolusionKeywordID", IsForeignKey=true)]
		public SolutionKeyword SolutionKeyword
		{
			get
			{
				return this._SolutionKeyword.Entity;
			}
			set
			{
				SolutionKeyword previousValue = this._SolutionKeyword.Entity;
				if (((previousValue != value) 
							|| (this._SolutionKeyword.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SolutionKeyword.Entity = null;
						previousValue.SolusionToKeywords.Remove(this);
					}
					this._SolutionKeyword.Entity = value;
					if ((value != null))
					{
						value.SolusionToKeywords.Add(this);
						this._SolutionKeywordID = value.SolusionKeywordID;
					}
					else
					{
						this._SolutionKeywordID = default(System.Guid);
					}
					this.SendPropertyChanged("SolutionKeyword");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Solution_SolusionToKeyword", Storage="_Solution", ThisKey="SolutionID", OtherKey="SolusionID", IsForeignKey=true)]
		public Solution Solution
		{
			get
			{
				return this._Solution.Entity;
			}
			set
			{
				Solution previousValue = this._Solution.Entity;
				if (((previousValue != value) 
							|| (this._Solution.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Solution.Entity = null;
						previousValue.SolusionToKeywords.Remove(this);
					}
					this._Solution.Entity = value;
					if ((value != null))
					{
						value.SolusionToKeywords.Add(this);
						this._SolutionID = value.SolusionID;
					}
					else
					{
						this._SolutionID = default(System.Guid);
					}
					this.SendPropertyChanged("Solution");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectUsers")]
	public partial class ProjectUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Project;
		
		private System.Guid _User;
		
		private EntityRef<User2> _User2;
		
		private EntityRef<Project> _Project1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectChanging(System.Guid value);
    partial void OnProjectChanged();
    partial void OnUserChanging(System.Guid value);
    partial void OnUserChanged();
    #endregion
		
		public ProjectUser()
		{
			this._User2 = default(EntityRef<User2>);
			this._Project1 = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Project", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Project
		{
			get
			{
				return this._Project;
			}
			set
			{
				if ((this._Project != value))
				{
					if (this._Project1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectChanging(value);
					this.SendPropertyChanging();
					this._Project = value;
					this.SendPropertyChanged("Project");
					this.OnProjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[User]", Storage="_User", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid User
		{
			get
			{
				return this._User;
			}
			set
			{
				if ((this._User != value))
				{
					this.OnUserChanging(value);
					this.SendPropertyChanging();
					this._User = value;
					this.SendPropertyChanged("User");
					this.OnUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User2_ProjectUser", Storage="_User2", ThisKey="User", OtherKey="ID", IsForeignKey=true)]
		public User2 User2
		{
			get
			{
				return this._User2.Entity;
			}
			set
			{
				User2 previousValue = this._User2.Entity;
				if (((previousValue != value) 
							|| (this._User2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User2.Entity = null;
						previousValue.ProjectUsers.Remove(this);
					}
					this._User2.Entity = value;
					if ((value != null))
					{
						value.ProjectUsers.Add(this);
						this._User = value.ID;
					}
					else
					{
						this._User = default(System.Guid);
					}
					this.SendPropertyChanged("User2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectUser", Storage="_Project1", ThisKey="Project", OtherKey="ID", IsForeignKey=true)]
		public Project Project1
		{
			get
			{
				return this._Project1.Entity;
			}
			set
			{
				Project previousValue = this._Project1.Entity;
				if (((previousValue != value) 
							|| (this._Project1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project1.Entity = null;
						previousValue.ProjectUsers.Remove(this);
					}
					this._Project1.Entity = value;
					if ((value != null))
					{
						value.ProjectUsers.Add(this);
						this._Project = value.ID;
					}
					else
					{
						this._Project = default(System.Guid);
					}
					this.SendPropertyChanged("Project1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User2")]
	public partial class User2 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private System.Nullable<System.Guid> _DefaultProject;
		
		private EntitySet<ProjectUser> _ProjectUsers;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDefaultProjectChanging(System.Nullable<System.Guid> value);
    partial void OnDefaultProjectChanged();
    #endregion
		
		public User2()
		{
			this._ProjectUsers = new EntitySet<ProjectUser>(new Action<ProjectUser>(this.attach_ProjectUsers), new Action<ProjectUser>(this.detach_ProjectUsers));
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultProject", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DefaultProject
		{
			get
			{
				return this._DefaultProject;
			}
			set
			{
				if ((this._DefaultProject != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDefaultProjectChanging(value);
					this.SendPropertyChanging();
					this._DefaultProject = value;
					this.SendPropertyChanged("DefaultProject");
					this.OnDefaultProjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User2_ProjectUser", Storage="_ProjectUsers", ThisKey="ID", OtherKey="User")]
		public EntitySet<ProjectUser> ProjectUsers
		{
			get
			{
				return this._ProjectUsers;
			}
			set
			{
				this._ProjectUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_User2", Storage="_Project", ThisKey="DefaultProject", OtherKey="ID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.User2s.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.User2s.Add(this);
						this._DefaultProject = value.ID;
					}
					else
					{
						this._DefaultProject = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectUsers(ProjectUser entity)
		{
			this.SendPropertyChanging();
			entity.User2 = this;
		}
		
		private void detach_ProjectUsers(ProjectUser entity)
		{
			this.SendPropertyChanging();
			entity.User2 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectModules")]
	public partial class ProjectModule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _Comment;
		
		private System.Guid _Parent;
		
		private EntitySet<Project> _Projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnParentChanging(System.Guid value);
    partial void OnParentChanged();
    #endregion
		
		public ProjectModule()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parent", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Parent
		{
			get
			{
				return this._Parent;
			}
			set
			{
				if ((this._Parent != value))
				{
					this.OnParentChanging(value);
					this.SendPropertyChanging();
					this._Parent = value;
					this.SendPropertyChanged("Parent");
					this.OnParentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectModule_Project", Storage="_Projects", ThisKey="ID", OtherKey="RootModule")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.ProjectModule = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.ProjectModule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tasks")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Title;
		
		private string _Comment;
		
		private System.Guid _Parent;
		
		private byte _Priority;
		
		private System.Guid _ProjectIterationID;
		
		private EntityRef<ProjectIteration> _ProjectIteration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnParentChanging(System.Guid value);
    partial void OnParentChanged();
    partial void OnPriorityChanging(byte value);
    partial void OnPriorityChanged();
    partial void OnProjectIterationIDChanging(System.Guid value);
    partial void OnProjectIterationIDChanged();
    #endregion
		
		public Task()
		{
			this._ProjectIteration = default(EntityRef<ProjectIteration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parent", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Parent
		{
			get
			{
				return this._Parent;
			}
			set
			{
				if ((this._Parent != value))
				{
					this.OnParentChanging(value);
					this.SendPropertyChanging();
					this._Parent = value;
					this.SendPropertyChanged("Parent");
					this.OnParentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="TinyInt NOT NULL")]
		public byte Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectIterationID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProjectIterationID
		{
			get
			{
				return this._ProjectIterationID;
			}
			set
			{
				if ((this._ProjectIterationID != value))
				{
					if (this._ProjectIteration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIterationIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectIterationID = value;
					this.SendPropertyChanged("ProjectIterationID");
					this.OnProjectIterationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectIteration_Task", Storage="_ProjectIteration", ThisKey="ProjectIterationID", OtherKey="ID", IsForeignKey=true)]
		public ProjectIteration ProjectIteration
		{
			get
			{
				return this._ProjectIteration.Entity;
			}
			set
			{
				ProjectIteration previousValue = this._ProjectIteration.Entity;
				if (((previousValue != value) 
							|| (this._ProjectIteration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectIteration.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._ProjectIteration.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._ProjectIterationID = value.ID;
					}
					else
					{
						this._ProjectIterationID = default(System.Guid);
					}
					this.SendPropertyChanged("ProjectIteration");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Projects")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _Desc;
		
		private System.Guid _RootModule;
		
		private System.Nullable<System.Guid> _CurIteration;
		
		private EntitySet<ProjectUser> _ProjectUsers;
		
		private EntitySet<User2> _User2s;
		
		private EntitySet<ProjectIteration> _ProjectIterations;
		
		private EntityRef<ProjectModule> _ProjectModule;
		
		private EntityRef<ProjectIteration> _ProjectIteration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescChanging(string value);
    partial void OnDescChanged();
    partial void OnRootModuleChanging(System.Guid value);
    partial void OnRootModuleChanged();
    partial void OnCurIterationChanging(System.Nullable<System.Guid> value);
    partial void OnCurIterationChanged();
    #endregion
		
		public Project()
		{
			this._ProjectUsers = new EntitySet<ProjectUser>(new Action<ProjectUser>(this.attach_ProjectUsers), new Action<ProjectUser>(this.detach_ProjectUsers));
			this._User2s = new EntitySet<User2>(new Action<User2>(this.attach_User2s), new Action<User2>(this.detach_User2s));
			this._ProjectIterations = new EntitySet<ProjectIteration>(new Action<ProjectIteration>(this.attach_ProjectIterations), new Action<ProjectIteration>(this.detach_ProjectIterations));
			this._ProjectModule = default(EntityRef<ProjectModule>);
			this._ProjectIteration = default(EntityRef<ProjectIteration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Desc]", Storage="_Desc", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged("Desc");
					this.OnDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RootModule", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RootModule
		{
			get
			{
				return this._RootModule;
			}
			set
			{
				if ((this._RootModule != value))
				{
					if (this._ProjectModule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRootModuleChanging(value);
					this.SendPropertyChanging();
					this._RootModule = value;
					this.SendPropertyChanged("RootModule");
					this.OnRootModuleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurIteration", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CurIteration
		{
			get
			{
				return this._CurIteration;
			}
			set
			{
				if ((this._CurIteration != value))
				{
					if (this._ProjectIteration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurIterationChanging(value);
					this.SendPropertyChanging();
					this._CurIteration = value;
					this.SendPropertyChanged("CurIteration");
					this.OnCurIterationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectUser", Storage="_ProjectUsers", ThisKey="ID", OtherKey="Project")]
		public EntitySet<ProjectUser> ProjectUsers
		{
			get
			{
				return this._ProjectUsers;
			}
			set
			{
				this._ProjectUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_User2", Storage="_User2s", ThisKey="ID", OtherKey="DefaultProject")]
		public EntitySet<User2> User2s
		{
			get
			{
				return this._User2s;
			}
			set
			{
				this._User2s.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectIteration", Storage="_ProjectIterations", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<ProjectIteration> ProjectIterations
		{
			get
			{
				return this._ProjectIterations;
			}
			set
			{
				this._ProjectIterations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectModule_Project", Storage="_ProjectModule", ThisKey="RootModule", OtherKey="ID", IsForeignKey=true)]
		public ProjectModule ProjectModule
		{
			get
			{
				return this._ProjectModule.Entity;
			}
			set
			{
				ProjectModule previousValue = this._ProjectModule.Entity;
				if (((previousValue != value) 
							|| (this._ProjectModule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectModule.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._ProjectModule.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._RootModule = value.ID;
					}
					else
					{
						this._RootModule = default(System.Guid);
					}
					this.SendPropertyChanged("ProjectModule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectIteration_Project", Storage="_ProjectIteration", ThisKey="CurIteration", OtherKey="ID", IsForeignKey=true)]
		public ProjectIteration ProjectIteration
		{
			get
			{
				return this._ProjectIteration.Entity;
			}
			set
			{
				ProjectIteration previousValue = this._ProjectIteration.Entity;
				if (((previousValue != value) 
							|| (this._ProjectIteration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectIteration.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._ProjectIteration.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._CurIteration = value.ID;
					}
					else
					{
						this._CurIteration = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ProjectIteration");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectUsers(ProjectUser entity)
		{
			this.SendPropertyChanging();
			entity.Project1 = this;
		}
		
		private void detach_ProjectUsers(ProjectUser entity)
		{
			this.SendPropertyChanging();
			entity.Project1 = null;
		}
		
		private void attach_User2s(User2 entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_User2s(User2 entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_ProjectIterations(ProjectIteration entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectIterations(ProjectIteration entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectIterations")]
	public partial class ProjectIteration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _ProjectID;
		
		private string _Name;
		
		private string _Comment;
		
		private byte _Order;
		
		private EntitySet<Task> _Tasks;
		
		private EntitySet<Project> _Projects;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnProjectIDChanging(System.Guid value);
    partial void OnProjectIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnOrderChanging(byte value);
    partial void OnOrderChanged();
    #endregion
		
		public ProjectIteration()
		{
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="TinyInt NOT NULL")]
		public byte Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectIteration_Task", Storage="_Tasks", ThisKey="ID", OtherKey="ProjectIterationID")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectIteration_Project", Storage="_Projects", ThisKey="ID", OtherKey="CurIteration")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectIteration", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectIterations.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectIterations.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(System.Guid);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.ProjectIteration = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.ProjectIteration = null;
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.ProjectIteration = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.ProjectIteration = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Solutions")]
	public partial class Solution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SolusionID;
		
		private string _SolutionPath;
		
		private string _SolutionDesc;
		
		private System.DateTime _RecentOpenTime;
		
		private string _MachineName;
		
		private EntitySet<SolusionToKeyword> _SolusionToKeywords;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSolusionIDChanging(System.Guid value);
    partial void OnSolusionIDChanged();
    partial void OnSolutionPathChanging(string value);
    partial void OnSolutionPathChanged();
    partial void OnSolutionDescChanging(string value);
    partial void OnSolutionDescChanged();
    partial void OnRecentOpenTimeChanging(System.DateTime value);
    partial void OnRecentOpenTimeChanged();
    partial void OnMachineNameChanging(string value);
    partial void OnMachineNameChanged();
    #endregion
		
		public Solution()
		{
			this._SolusionToKeywords = new EntitySet<SolusionToKeyword>(new Action<SolusionToKeyword>(this.attach_SolusionToKeywords), new Action<SolusionToKeyword>(this.detach_SolusionToKeywords));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SolusionID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SolusionID
		{
			get
			{
				return this._SolusionID;
			}
			set
			{
				if ((this._SolusionID != value))
				{
					this.OnSolusionIDChanging(value);
					this.SendPropertyChanging();
					this._SolusionID = value;
					this.SendPropertyChanged("SolusionID");
					this.OnSolusionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SolutionPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SolutionPath
		{
			get
			{
				return this._SolutionPath;
			}
			set
			{
				if ((this._SolutionPath != value))
				{
					this.OnSolutionPathChanging(value);
					this.SendPropertyChanging();
					this._SolutionPath = value;
					this.SendPropertyChanged("SolutionPath");
					this.OnSolutionPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SolutionDesc", DbType="NVarChar(MAX)")]
		public string SolutionDesc
		{
			get
			{
				return this._SolutionDesc;
			}
			set
			{
				if ((this._SolutionDesc != value))
				{
					this.OnSolutionDescChanging(value);
					this.SendPropertyChanging();
					this._SolutionDesc = value;
					this.SendPropertyChanged("SolutionDesc");
					this.OnSolutionDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecentOpenTime", DbType="DateTime NOT NULL")]
		public System.DateTime RecentOpenTime
		{
			get
			{
				return this._RecentOpenTime;
			}
			set
			{
				if ((this._RecentOpenTime != value))
				{
					this.OnRecentOpenTimeChanging(value);
					this.SendPropertyChanging();
					this._RecentOpenTime = value;
					this.SendPropertyChanged("RecentOpenTime");
					this.OnRecentOpenTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MachineName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MachineName
		{
			get
			{
				return this._MachineName;
			}
			set
			{
				if ((this._MachineName != value))
				{
					this.OnMachineNameChanging(value);
					this.SendPropertyChanging();
					this._MachineName = value;
					this.SendPropertyChanged("MachineName");
					this.OnMachineNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Solution_SolusionToKeyword", Storage="_SolusionToKeywords", ThisKey="SolusionID", OtherKey="SolutionID")]
		public EntitySet<SolusionToKeyword> SolusionToKeywords
		{
			get
			{
				return this._SolusionToKeywords;
			}
			set
			{
				this._SolusionToKeywords.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SolusionToKeywords(SolusionToKeyword entity)
		{
			this.SendPropertyChanging();
			entity.Solution = this;
		}
		
		private void detach_SolusionToKeywords(SolusionToKeyword entity)
		{
			this.SendPropertyChanging();
			entity.Solution = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Books")]
	public partial class Book : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookID;
		
		private string _BookName;
		
		private byte _BookRate;
		
		private string _BookDesc;
		
		private System.Data.Linq.Binary _BookCover;
		
		private System.Nullable<int> _BookDefaultFile;
		
		private System.Nullable<int> _BookDefaultKeyword;
		
		private string _BookPublishHouse;
		
		private string _BookSubTitle;
		
		private System.Nullable<int> _BookType;
		
		private EntitySet<BookKeywords> _BookKeywords;
		
		private EntitySet<BookWriters> _BookWriters;
		
		private EntitySet<UserBooks> _UserBooks;
		
		private EntitySet<BookComment> _BookComments;
		
		private EntitySet<File> _Files;
		
		private EntityRef<Keywords> _Keywords;
		
		private EntityRef<File> _File;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookIDChanging(int value);
    partial void OnBookIDChanged();
    partial void OnBookNameChanging(string value);
    partial void OnBookNameChanged();
    partial void OnBookRateChanging(byte value);
    partial void OnBookRateChanged();
    partial void OnBookDescChanging(string value);
    partial void OnBookDescChanged();
    partial void OnBookCoverChanging(System.Data.Linq.Binary value);
    partial void OnBookCoverChanged();
    partial void OnBookDefaultFileChanging(System.Nullable<int> value);
    partial void OnBookDefaultFileChanged();
    partial void OnBookDefaultKeywordChanging(System.Nullable<int> value);
    partial void OnBookDefaultKeywordChanged();
    partial void OnBookPublishHouseChanging(string value);
    partial void OnBookPublishHouseChanged();
    partial void OnBookSubTitleChanging(string value);
    partial void OnBookSubTitleChanged();
    partial void OnBookTypeChanging(System.Nullable<int> value);
    partial void OnBookTypeChanged();
    #endregion
		
		public Book()
		{
			this._BookKeywords = new EntitySet<BookKeywords>(new Action<BookKeywords>(this.attach_BookKeywords), new Action<BookKeywords>(this.detach_BookKeywords));
			this._BookWriters = new EntitySet<BookWriters>(new Action<BookWriters>(this.attach_BookWriters), new Action<BookWriters>(this.detach_BookWriters));
			this._UserBooks = new EntitySet<UserBooks>(new Action<UserBooks>(this.attach_UserBooks), new Action<UserBooks>(this.detach_UserBooks));
			this._BookComments = new EntitySet<BookComment>(new Action<BookComment>(this.attach_BookComments), new Action<BookComment>(this.detach_BookComments));
			this._Files = new EntitySet<File>(new Action<File>(this.attach_Files), new Action<File>(this.detach_Files));
			this._Keywords = default(EntityRef<Keywords>);
			this._File = default(EntityRef<File>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string BookName
		{
			get
			{
				return this._BookName;
			}
			set
			{
				if ((this._BookName != value))
				{
					this.OnBookNameChanging(value);
					this.SendPropertyChanging();
					this._BookName = value;
					this.SendPropertyChanged("BookName");
					this.OnBookNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookRate", DbType="TinyInt NOT NULL")]
		public byte BookRate
		{
			get
			{
				return this._BookRate;
			}
			set
			{
				if ((this._BookRate != value))
				{
					this.OnBookRateChanging(value);
					this.SendPropertyChanging();
					this._BookRate = value;
					this.SendPropertyChanged("BookRate");
					this.OnBookRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookDesc", DbType="NVarChar(MAX)")]
		public string BookDesc
		{
			get
			{
				return this._BookDesc;
			}
			set
			{
				if ((this._BookDesc != value))
				{
					this.OnBookDescChanging(value);
					this.SendPropertyChanging();
					this._BookDesc = value;
					this.SendPropertyChanged("BookDesc");
					this.OnBookDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookCover", DbType="Image", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary BookCover
		{
			get
			{
				return this._BookCover;
			}
			set
			{
				if ((this._BookCover != value))
				{
					this.OnBookCoverChanging(value);
					this.SendPropertyChanging();
					this._BookCover = value;
					this.SendPropertyChanged("BookCover");
					this.OnBookCoverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookDefaultFile", DbType="Int")]
		public System.Nullable<int> BookDefaultFile
		{
			get
			{
				return this._BookDefaultFile;
			}
			set
			{
				if ((this._BookDefaultFile != value))
				{
					if (this._File.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookDefaultFileChanging(value);
					this.SendPropertyChanging();
					this._BookDefaultFile = value;
					this.SendPropertyChanged("BookDefaultFile");
					this.OnBookDefaultFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookDefaultKeyword", DbType="Int")]
		public System.Nullable<int> BookDefaultKeyword
		{
			get
			{
				return this._BookDefaultKeyword;
			}
			set
			{
				if ((this._BookDefaultKeyword != value))
				{
					if (this._Keywords.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookDefaultKeywordChanging(value);
					this.SendPropertyChanging();
					this._BookDefaultKeyword = value;
					this.SendPropertyChanged("BookDefaultKeyword");
					this.OnBookDefaultKeywordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookPublishHouse", DbType="NVarChar(50)")]
		public string BookPublishHouse
		{
			get
			{
				return this._BookPublishHouse;
			}
			set
			{
				if ((this._BookPublishHouse != value))
				{
					this.OnBookPublishHouseChanging(value);
					this.SendPropertyChanging();
					this._BookPublishHouse = value;
					this.SendPropertyChanged("BookPublishHouse");
					this.OnBookPublishHouseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookSubTitle", DbType="NVarChar(MAX)")]
		public string BookSubTitle
		{
			get
			{
				return this._BookSubTitle;
			}
			set
			{
				if ((this._BookSubTitle != value))
				{
					this.OnBookSubTitleChanging(value);
					this.SendPropertyChanging();
					this._BookSubTitle = value;
					this.SendPropertyChanged("BookSubTitle");
					this.OnBookSubTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookType", DbType="Int")]
		public System.Nullable<int> BookType
		{
			get
			{
				return this._BookType;
			}
			set
			{
				if ((this._BookType != value))
				{
					this.OnBookTypeChanging(value);
					this.SendPropertyChanging();
					this._BookType = value;
					this.SendPropertyChanged("BookType");
					this.OnBookTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_BookKeywords", Storage="_BookKeywords", ThisKey="BookID", OtherKey="BookId")]
		public EntitySet<BookKeywords> BookKeywords
		{
			get
			{
				return this._BookKeywords;
			}
			set
			{
				this._BookKeywords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_BookWriters", Storage="_BookWriters", ThisKey="BookID", OtherKey="BookId")]
		public EntitySet<BookWriters> BookWriters
		{
			get
			{
				return this._BookWriters;
			}
			set
			{
				this._BookWriters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_UserBooks", Storage="_UserBooks", ThisKey="BookID", OtherKey="BookID")]
		public EntitySet<UserBooks> UserBooks
		{
			get
			{
				return this._UserBooks;
			}
			set
			{
				this._UserBooks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_BookComment", Storage="_BookComments", ThisKey="BookID", OtherKey="BookID")]
		public EntitySet<BookComment> BookComments
		{
			get
			{
				return this._BookComments;
			}
			set
			{
				this._BookComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_File", Storage="_Files", ThisKey="BookID", OtherKey="BookID")]
		public EntitySet<File> Files
		{
			get
			{
				return this._Files;
			}
			set
			{
				this._Files.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Keywords_Book", Storage="_Keywords", ThisKey="BookDefaultKeyword", OtherKey="KeywordID", IsForeignKey=true)]
		public Keywords Keywords
		{
			get
			{
				return this._Keywords.Entity;
			}
			set
			{
				Keywords previousValue = this._Keywords.Entity;
				if (((previousValue != value) 
							|| (this._Keywords.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Keywords.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._Keywords.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._BookDefaultKeyword = value.KeywordID;
					}
					else
					{
						this._BookDefaultKeyword = default(Nullable<int>);
					}
					this.SendPropertyChanged("Keywords");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="File_Book", Storage="_File", ThisKey="BookDefaultFile", OtherKey="FileID", IsForeignKey=true)]
		public File File
		{
			get
			{
				return this._File.Entity;
			}
			set
			{
				File previousValue = this._File.Entity;
				if (((previousValue != value) 
							|| (this._File.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._File.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._File.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._BookDefaultFile = value.FileID;
					}
					else
					{
						this._BookDefaultFile = default(Nullable<int>);
					}
					this.SendPropertyChanged("File");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookKeywords(BookKeywords entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_BookKeywords(BookKeywords entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
		
		private void attach_BookWriters(BookWriters entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_BookWriters(BookWriters entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
		
		private void attach_UserBooks(UserBooks entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_UserBooks(UserBooks entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
		
		private void attach_BookComments(BookComment entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_BookComments(BookComment entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
		
		private void attach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookComments")]
	public partial class BookComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CommentID;
		
		private int _BookID;
		
		private string _Comment;
		
		private int _UserID;
		
		private System.DateTime _Date;
		
		private int _Support;
		
		private int _Against;
		
		private EntityRef<Book> _Book;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommentIDChanging(System.Guid value);
    partial void OnCommentIDChanged();
    partial void OnBookIDChanging(int value);
    partial void OnBookIDChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnSupportChanging(int value);
    partial void OnSupportChanged();
    partial void OnAgainstChanging(int value);
    partial void OnAgainstChanged();
    #endregion
		
		public BookComment()
		{
			this._Book = default(EntityRef<Book>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookID", DbType="Int NOT NULL")]
		public int BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Support", DbType="Int NOT NULL")]
		public int Support
		{
			get
			{
				return this._Support;
			}
			set
			{
				if ((this._Support != value))
				{
					this.OnSupportChanging(value);
					this.SendPropertyChanging();
					this._Support = value;
					this.SendPropertyChanged("Support");
					this.OnSupportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Against", DbType="Int NOT NULL")]
		public int Against
		{
			get
			{
				return this._Against;
			}
			set
			{
				if ((this._Against != value))
				{
					this.OnAgainstChanging(value);
					this.SendPropertyChanging();
					this._Against = value;
					this.SendPropertyChanged("Against");
					this.OnAgainstChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_BookComment", Storage="_Book", ThisKey="BookID", OtherKey="BookID", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.BookComments.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.BookComments.Add(this);
						this._BookID = value.BookID;
					}
					else
					{
						this._BookID = default(int);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BookComment", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.BookComments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.BookComments.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Files")]
	public partial class File : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FileID;
		
		private int _BookID;
		
		private string _FilePath;
		
		private string _FileDesc;
		
		private string _FileVersion;
		
		private System.Nullable<bool> _BookResource;
		
		private System.Nullable<int> _UserID;
		
		private System.DateTime _UploadDate;
		
		private EntitySet<Book> _Books;
		
		private EntityRef<Book> _Book;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileIDChanging(int value);
    partial void OnFileIDChanged();
    partial void OnBookIDChanging(int value);
    partial void OnBookIDChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    partial void OnFileDescChanging(string value);
    partial void OnFileDescChanged();
    partial void OnFileVersionChanging(string value);
    partial void OnFileVersionChanged();
    partial void OnBookResourceChanging(System.Nullable<bool> value);
    partial void OnBookResourceChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnUploadDateChanging(System.DateTime value);
    partial void OnUploadDateChanged();
    #endregion
		
		public File()
		{
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			this._Book = default(EntityRef<Book>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FileID
		{
			get
			{
				return this._FileID;
			}
			set
			{
				if ((this._FileID != value))
				{
					this.OnFileIDChanging(value);
					this.SendPropertyChanging();
					this._FileID = value;
					this.SendPropertyChanged("FileID");
					this.OnFileIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookID", DbType="Int NOT NULL")]
		public int BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FilePath
		{
			get
			{
				return this._FilePath;
			}
			set
			{
				if ((this._FilePath != value))
				{
					this.OnFilePathChanging(value);
					this.SendPropertyChanging();
					this._FilePath = value;
					this.SendPropertyChanged("FilePath");
					this.OnFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileDesc", DbType="NVarChar(MAX)")]
		public string FileDesc
		{
			get
			{
				return this._FileDesc;
			}
			set
			{
				if ((this._FileDesc != value))
				{
					this.OnFileDescChanging(value);
					this.SendPropertyChanging();
					this._FileDesc = value;
					this.SendPropertyChanged("FileDesc");
					this.OnFileDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileVersion", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FileVersion
		{
			get
			{
				return this._FileVersion;
			}
			set
			{
				if ((this._FileVersion != value))
				{
					this.OnFileVersionChanging(value);
					this.SendPropertyChanging();
					this._FileVersion = value;
					this.SendPropertyChanged("FileVersion");
					this.OnFileVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookResource", DbType="Bit")]
		public System.Nullable<bool> BookResource
		{
			get
			{
				return this._BookResource;
			}
			set
			{
				if ((this._BookResource != value))
				{
					this.OnBookResourceChanging(value);
					this.SendPropertyChanging();
					this._BookResource = value;
					this.SendPropertyChanged("BookResource");
					this.OnBookResourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadDate", DbType="DateTime NOT NULL")]
		public System.DateTime UploadDate
		{
			get
			{
				return this._UploadDate;
			}
			set
			{
				if ((this._UploadDate != value))
				{
					this.OnUploadDateChanging(value);
					this.SendPropertyChanging();
					this._UploadDate = value;
					this.SendPropertyChanged("UploadDate");
					this.OnUploadDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="File_Book", Storage="_Books", ThisKey="FileID", OtherKey="BookDefaultFile")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_File", Storage="_Book", ThisKey="BookID", OtherKey="BookID", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.Files.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.Files.Add(this);
						this._BookID = value.BookID;
					}
					else
					{
						this._BookID = default(int);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.File = this;
		}
		
		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.File = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportExceptions")]
	public partial class ReportException : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ReportID;
		
		private int _UserID;
		
		private System.DateTime _Date;
		
		private string _Message;
		
		private string _StackTrace;
		
		private string _UserWords;
		
		private int _State;
		
		private string _SoftwareVersion;
		
		private string _SoftwareName;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportIDChanging(System.Guid value);
    partial void OnReportIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnStackTraceChanging(string value);
    partial void OnStackTraceChanged();
    partial void OnUserWordsChanging(string value);
    partial void OnUserWordsChanged();
    partial void OnStateChanging(int value);
    partial void OnStateChanged();
    partial void OnSoftwareVersionChanging(string value);
    partial void OnSoftwareVersionChanged();
    partial void OnSoftwareNameChanging(string value);
    partial void OnSoftwareNameChanged();
    #endregion
		
		public ReportException()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ReportID
		{
			get
			{
				return this._ReportID;
			}
			set
			{
				if ((this._ReportID != value))
				{
					this.OnReportIDChanging(value);
					this.SendPropertyChanging();
					this._ReportID = value;
					this.SendPropertyChanged("ReportID");
					this.OnReportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StackTrace", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string StackTrace
		{
			get
			{
				return this._StackTrace;
			}
			set
			{
				if ((this._StackTrace != value))
				{
					this.OnStackTraceChanging(value);
					this.SendPropertyChanging();
					this._StackTrace = value;
					this.SendPropertyChanged("StackTrace");
					this.OnStackTraceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserWords", DbType="NVarChar(MAX)")]
		public string UserWords
		{
			get
			{
				return this._UserWords;
			}
			set
			{
				if ((this._UserWords != value))
				{
					this.OnUserWordsChanging(value);
					this.SendPropertyChanging();
					this._UserWords = value;
					this.SendPropertyChanged("UserWords");
					this.OnUserWordsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="Int NOT NULL")]
		public int State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoftwareVersion", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SoftwareVersion
		{
			get
			{
				return this._SoftwareVersion;
			}
			set
			{
				if ((this._SoftwareVersion != value))
				{
					this.OnSoftwareVersionChanging(value);
					this.SendPropertyChanging();
					this._SoftwareVersion = value;
					this.SendPropertyChanged("SoftwareVersion");
					this.OnSoftwareVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoftwareName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SoftwareName
		{
			get
			{
				return this._SoftwareName;
			}
			set
			{
				if ((this._SoftwareName != value))
				{
					this.OnSoftwareNameChanging(value);
					this.SendPropertyChanging();
					this._SoftwareName = value;
					this.SendPropertyChanged("SoftwareName");
					this.OnSoftwareNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ReportException", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ReportExceptions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ReportExceptions.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _UserName;
		
		private string _UserPassword;
		
		private int _UserLastBookTick;
		
		private System.DateTime _UserLastLoginDate;
		
		private int _UserLoginCount;
		
		private System.Nullable<System.DateTime> _UserLastCheckBookDate;
		
		private EntitySet<UserBooks> _UserBooks;
		
		private EntitySet<UserKeyword> _UserKeywords;
		
		private EntitySet<BookComment> _BookComments;
		
		private EntitySet<ReportException> _ReportExceptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserPasswordChanging(string value);
    partial void OnUserPasswordChanged();
    partial void OnUserLastBookTickChanging(int value);
    partial void OnUserLastBookTickChanged();
    partial void OnUserLastLoginDateChanging(System.DateTime value);
    partial void OnUserLastLoginDateChanged();
    partial void OnUserLoginCountChanging(int value);
    partial void OnUserLoginCountChanged();
    partial void OnUserLastCheckBookDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUserLastCheckBookDateChanged();
    #endregion
		
		public User()
		{
			this._UserBooks = new EntitySet<UserBooks>(new Action<UserBooks>(this.attach_UserBooks), new Action<UserBooks>(this.detach_UserBooks));
			this._UserKeywords = new EntitySet<UserKeyword>(new Action<UserKeyword>(this.attach_UserKeywords), new Action<UserKeyword>(this.detach_UserKeywords));
			this._BookComments = new EntitySet<BookComment>(new Action<BookComment>(this.attach_BookComments), new Action<BookComment>(this.detach_BookComments));
			this._ReportExceptions = new EntitySet<ReportException>(new Action<ReportException>(this.attach_ReportExceptions), new Action<ReportException>(this.detach_ReportExceptions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPassword", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string UserPassword
		{
			get
			{
				return this._UserPassword;
			}
			set
			{
				if ((this._UserPassword != value))
				{
					this.OnUserPasswordChanging(value);
					this.SendPropertyChanging();
					this._UserPassword = value;
					this.SendPropertyChanged("UserPassword");
					this.OnUserPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLastBookTick", DbType="Int NOT NULL")]
		public int UserLastBookTick
		{
			get
			{
				return this._UserLastBookTick;
			}
			set
			{
				if ((this._UserLastBookTick != value))
				{
					this.OnUserLastBookTickChanging(value);
					this.SendPropertyChanging();
					this._UserLastBookTick = value;
					this.SendPropertyChanged("UserLastBookTick");
					this.OnUserLastBookTickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLastLoginDate", DbType="DateTime NOT NULL")]
		public System.DateTime UserLastLoginDate
		{
			get
			{
				return this._UserLastLoginDate;
			}
			set
			{
				if ((this._UserLastLoginDate != value))
				{
					this.OnUserLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._UserLastLoginDate = value;
					this.SendPropertyChanged("UserLastLoginDate");
					this.OnUserLastLoginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLoginCount", DbType="Int NOT NULL")]
		public int UserLoginCount
		{
			get
			{
				return this._UserLoginCount;
			}
			set
			{
				if ((this._UserLoginCount != value))
				{
					this.OnUserLoginCountChanging(value);
					this.SendPropertyChanging();
					this._UserLoginCount = value;
					this.SendPropertyChanged("UserLoginCount");
					this.OnUserLoginCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLastCheckBookDate", DbType="Date")]
		public System.Nullable<System.DateTime> UserLastCheckBookDate
		{
			get
			{
				return this._UserLastCheckBookDate;
			}
			set
			{
				if ((this._UserLastCheckBookDate != value))
				{
					this.OnUserLastCheckBookDateChanging(value);
					this.SendPropertyChanging();
					this._UserLastCheckBookDate = value;
					this.SendPropertyChanged("UserLastCheckBookDate");
					this.OnUserLastCheckBookDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserBooks", Storage="_UserBooks", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<UserBooks> UserBooks
		{
			get
			{
				return this._UserBooks;
			}
			set
			{
				this._UserBooks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserKeyword", Storage="_UserKeywords", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<UserKeyword> UserKeywords
		{
			get
			{
				return this._UserKeywords;
			}
			set
			{
				this._UserKeywords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BookComment", Storage="_BookComments", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<BookComment> BookComments
		{
			get
			{
				return this._BookComments;
			}
			set
			{
				this._BookComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ReportException", Storage="_ReportExceptions", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<ReportException> ReportExceptions
		{
			get
			{
				return this._ReportExceptions;
			}
			set
			{
				this._ReportExceptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserBooks(UserBooks entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserBooks(UserBooks entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserKeywords(UserKeyword entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserKeywords(UserKeyword entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_BookComments(BookComment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_BookComments(BookComment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ReportExceptions(ReportException entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ReportExceptions(ReportException entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
