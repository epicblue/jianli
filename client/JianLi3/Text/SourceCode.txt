        // 显然本工具，支撑的是技术的开发。

        // 在探索阶段，我们主要对代码及相关文档和笔记打交道。
        // 而在探索阶段，又分2个阶段
        // 1个是无目的或多变的目的的探索
        // 通常我们只听到了一个技术好处，或者就是为了使用这个技术，或者为了探索，就决定使用这个技术
        // 但这样实际上我们对其如何基本的运行起来都是非常陌生的，或者可能非常容易的建立基本运行，
        // 目的就转变成如何使用技术的优势
        // 所以，我们要支持目的空缺的workspace。比如，我们拿一个代号来描述一个项目，而不是使用一个限定名称来明确一个项目。

        // 1个是有目的的探索
        // 目的探索有大有小，小如10多行代码，就无需管理
        // 大到多个初期代码的探索，或一个经典代码的持续探索，都是需要对其环境做出恰当保存的。
        // 此时workspace需要目的，随着发展，对一个workspace的持续探索可能引发出多个目的，这样workspace需要有多个目的。
        // 目的的来源。
        // 可能来自基本的技术，或是环境的细节。这样，可以在列出来的技术或环境中，指定。
        // 也可能来自技术在特定环境下的细节，这时候，特定环境也成了技术的要求。
        // 当然，在没有决定技术的时候，可以先确定环境要求，然后再选取多个技术，开发选择。这时候，可能某些技术的环境要求无法达到（个人能力限制，或技术限制，或其他依赖项限制），当然此时的workspace可以保留，以便下次探索。
        // 当我们决定基础技术，决定应用环境的时候，差不多就决定的好基本框架了。
        // 此时预设计和探索阶段结束。


        // 开始第二个迭代。必须统一的明确，此阶段以功能和单元测试为主导和驱动，在模块的范围内展开。
        // 开始规划大模块。并给于模块必须要求和限制。当然，在这些要求的基础上，可以再细分或更广泛，以便实现更多的考虑为下一阶段的迭代做准备。
        // 此时，以基本功能和基本单元测试的全部结束为迭代为标志。
        
        // 第二个迭代可能需要多个。
        // 系统设计考虑不全面。
        // 用户需求没有明确，或重点、费时开发在上个迭代中没有得到凸现。
        // 修正系统设计，修正模块设计。
        // 再次开发，并实行基本功能和基本单元测试。

        // 开始第三个迭代，必须统一的明确，此时以系统测试和功能测试和用户体验为主导和驱动。在整体范围内展开。
        // 此时需要更多的交流和沟通。
        // 此时，以验收测试的结束为迭代结束标志。

        // 此后进入维护阶段。

        // 那我们缺少的对系统分析的集成和控制能力。

        // 需要将这里不够性感的关键部分加上盐。

        // 需要在下一阶段展开对系统分析的学习。

        // 其中涉及到的代码，一般所具有的标签主要是，技术，依赖项，特性
        // 而文档比较集中的描述功能，特性，指导，最佳实践，技术条件。

        // 项目需要
        // 在异常情况下解决问题后使用笔记记录问题。问题包括，未知技术细节，技术参考，更好实践，错误处理。小，而且不需要保存workspace，定期分类即可。
        // 出现的形式，主要是网页，blog。
        // 文档，一般指外部技术文档，较全面的展示某个环境下的特定角度。比如，技术条件，最佳实践，
